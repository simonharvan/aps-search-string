
1. Uvod
Jednoduchy program pouzitelny na rychle vyhladanie retazca vo velkych suboroch.


2. Navrh
Riesenie je navrhnute, tak aby pouzivatel mohol jednoducho menit vytazenie stroja.
Ak by chcel moze robit vypocet na CPU a GPU.

Cele riesenie som navrhol na OpenCL framework pre písanie programov,
ktoré sa budú vykonávať na heterogénnych platformách pozostávajúcich z CPU, GPU a iných procesorov.
Toto riesenie som navrhol, lebo OpenCL je mozne spustit cross-platformovo a bolo
navrhnute na rozsirenie pouzivania GPU za hranice spracovania obrazu.

Navrhnute riesenie sa odvijalo aj od vyvojoveho prostredia xcode, ktory podporuje
kompilovanie zdrojoveho kodu pre OpenCL a spustanie binariek.
3. Implementacia
Implementacia OpenCL ma niekolko zakladnych krokov.

a.  Vybrat zariadenie
b.  Vytvorit context
c.  Vytvorit radu prikazov
d.  Vytvorit objekty pamate
e.  Citat subor pre kernel
f.  Vytvorit objekt programu
g.  Skompilovat
h.  Vytvorit kernel objekt
i.  Nastavit vstupne argumenty
j.  Spustit kernel
k.  Precitat objekty
l.  Uvolnit objekty

Implementovanie paralelizacie znamenalo rozdelit vstup (velky subor) na viac
casti a prehladavat ich osobne.
V subore main.cl mozeme vidiet riadky:

int threadId = get_global_id(0);

if (index + psize - 1 > inputSize) {
    kmp(input + (index), partSize, pattern, pi, psize, output, index);
}else {
    kmp(input + (index), partSize + psize - 1, pattern, pi, psize, output, index);
}

kmp je funkcia Knuth-Morris-Pratt algoritmu, ktory vracia prvu poziciu v casti.
threadId je cislo threadu, ktory danu cast pocita. Na zaklade toho urcujem, ktoru cast suboru mam vytiahnut.

Dalej bolo treba vyriesit prechody medzi castami suboru, aby sa tam nenachadzal hladany
retazec. Toto sme vyriesili zvacsenim velkosti hladanej casti o velkost patternu - 1.
Ak sa toto nachadzalo nakonci uz sme dalej nepripocitavali.
4. Testovanie
Testovanie prebiehalo na stroji MacBook Pro s CPU 2,7 GHz Intel Core i5 a GPU Intel Iris Graphics 6100 1536 MB.
Zavery z testovania su zhrnute v grafe v prilohe (graf.png).

Velkost suboru[B]	CPU[s]	  GPU[s]
930	              0,000170	0,014483
13964	            0,000184	0,014452
530293	          0,004358	0,017427
1060586	          0,008802	0,020915
3181758	          0,026018	0,031849
6363624	          0,048450	0,045881
25454497	        0,184127	0,144689
50908994	        0,376917	0,282787
76363491	        0,630186	0,381808
103814336	        0,850106	0,531693

Testovanie prebiehalo tiez pomocou programu time. Vysledky najdete v grafe v prilohe (graf2.png).
Vsetky programy vypisovali iba pocet vyskytov v subore.
Velkost suboru[B]	CPU[s]	GPU[s]	GREP[s]
930	              0,021	  0,035	  0,011
13964	            0,019	  0,037	  0,012
530293	          0,026	  0,052	  0,01
1060586	          0,031	  0,072	  0,021
3181758	          0,058	  0,125	  0,032
6363624	          0,094	  0,128	  0,064
25454497	        0,282	  0,675	  0,205
50908994	        0,532	  1,318	  0,389
76363491	        0,802	  1,952	  0,57
103814336	        1,116	  1,367	  0,993
152726982         1,813	  1,293	  1,037


5. Zaver
Program sme testovali. Na GPU fungoval spolahlivo, jeho navratove hodnoty sme porovnavali s vysledkami grep-u.

Vytvoril som program, ktory na grafickej karte zvlada vyhladat spolahlivo
v suboroch do testovanych 200MB.

Z testovania je ale jasne, ze este nedosiahol rychlost, ktoru ma grep.
Je vsak aj vidno, ze drzi s nim tempo, ak by sme dokazali vylepsit vypisy,
ktore aktualne trvaju O(n), tak by sme sa pravdepodobne dostali pod hranicu grep-u.

6. Obmedzenia
Program zvladne subory, len do velkosti, ktoru dovoli OpenCL alokovat.
Na GPU ma problem s paralelizaciou, ak je pattern kratky (mensi ako 4 znaky).

7. Prilohy
a. Pouzivatelska prirucka
Program ma k dispozicii 7 prepinacov:
-p - nasleduje vzor, ktory chceme vyhladat, bud v apostrofoch alebo samotny, ak ide o jedno slovo.
-f - subor v ktorom chceme vyhladat
-h - vypise vsetky mozne prepinace
-c - cpu vypocet
-g - gpu vypocet (default)
-l - vypis vo forme 'nachadza sa na riadku xx'
-o - vypis vo forme 'nachadza sa s offsetom xx'

Nasledne vypise, kolko vypisov sa naslo, pripadne pozadovany vypis.

b. Poznamky
i. Projekt je v gite. Funkcna verzia je v Mastrovi.
ii. POZOR! Ak chcete skompilovat projekt musite si nastavit cestu k suboru main.cl na riadku priblizne 370.
